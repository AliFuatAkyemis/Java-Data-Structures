
public class Test {
	public static void main(String[] args) {
//		testSLL();
//		testDLL();
//		testCLL();
//		testLS();
//		testAS();
//		testLQ();
//		testAQ();
//		testSPQ();
//		testUPQ();
//		testNH();
//		testAH();
//		testNBST();
//		testABST();
		testNAVL();
	}
	
	public static void testSLL() {
		SinglyLinkedList<Integer> list = new SinglyLinkedList<>();
		list.addFirst(1);
		list.addLast(2);
		list.addLast(3);
		list.addLast(4);
		list.addLast(5);
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		list.addFirst(5);
		list.addFirst(4);
		list.addFirst(3);
		list.addFirst(2);
		list.addFirst(1);
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		list.addLast(1);
		list.addLast(2);
		list.addLast(3);
		list.addLast(4);
		list.addLast(5);
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
	}
	
	public static void testDLL() {
		DoublyLinkedList<Integer> list = new DoublyLinkedList<>();
		list.addFirst(1);
		list.addLast(2);
		list.addLast(3);
		list.addLast(4);
		list.addLast(5);
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		list.addFirst(5);
		list.addFirst(4);
		list.addFirst(3);
		list.addFirst(2);
		list.addFirst(1);
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeLast());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeLast());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeLast());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeLast());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeLast());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeLast());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeLast());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		list.addLast(1);
		list.addLast(2);
		list.addLast(3);
		list.addLast(4);
		list.addLast(5);
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
	}
	
	public static void testCLL() {
		CircularLinkedList<Integer> list = new CircularLinkedList<>();
		list.addFirst(1);
		list.addLast(2);
		list.addLast(3);
		list.addLast(4);
		list.addLast(5);
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		list.addFirst(5);
		list.addFirst(4);
		list.addFirst(3);
		list.addFirst(2);
		list.addFirst(1);
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		System.out.println("Removed: " + list.removeFirst());
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
		list.addLast(1);
		list.addLast(2);
		list.addLast(3);
		list.addLast(4);
		list.addLast(5);
		System.out.println("Size: " + list.size());
		System.out.println(list.toString());
	}
	
	public static void testLS() {
		LinkedStack<Integer> s = new LinkedStack<>();
		s.push(1);
		s.push(2);
		s.push(3);
		s.push(4);
		s.push(5);
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		s.push(5);
		s.push(4);
		s.push(3);
		s.push(2);
		s.push(1);
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		s.push(1);
		s.push(2);
		s.push(3);
		s.push(4);
		s.push(5);
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
	}
	
	public static void testAS() {
		ArrayStack<Integer> s = new ArrayStack<>();
		s.push(1);
		s.push(2);
		s.push(3);
		s.push(4);
		s.push(5);
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		s.push(5);
		s.push(4);
		s.push(3);
		s.push(2);
		s.push(1);
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		System.out.println("Popped: " + s.pop());
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
		s.push(1);
		s.push(2);
		s.push(3);
		s.push(4);
		s.push(5);
		System.out.println("Size: " + s.size());
		System.out.println(s.toString());
	}
	
	public static void testLQ() {
		LinkedQueue<Integer> q = new LinkedQueue<>();
		q.enqueue(5);
		q.enqueue(4);
		q.enqueue(3);
		q.enqueue(2);
		q.enqueue(1);
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		q.enqueue(1);
		q.enqueue(2);
		q.enqueue(3);
		q.enqueue(4);
		q.enqueue(5);
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		q.enqueue(5);
		q.enqueue(4);
		q.enqueue(3);
		q.enqueue(2);
		q.enqueue(1);
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
	}
	
	public static void testAQ() {
		ArrayQueue<Integer> q = new ArrayQueue<>();
		q.enqueue(1);
		q.enqueue(2);
		q.enqueue(3);
		q.enqueue(4);
		q.enqueue(5);
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		q.enqueue(5);
		q.enqueue(4);
		q.enqueue(3);
		q.enqueue(2);
		q.enqueue(1);
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		System.out.println("Dequeued: " + q.dequeue());
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
		q.enqueue(1);
		q.enqueue(2);
		q.enqueue(3);
		q.enqueue(4);
		q.enqueue(5);
		System.out.println("Size: " + q.size());
		System.out.println(q.toString());
	}
	
	public static void testSPQ() {
		SortedPriorityQueue<Integer, String> pq = new SortedPriorityQueue<>();
		pq.insert(4, "D");
		pq.insert(3, "C");
		pq.insert(5, "E");
		pq.insert(1, "A");
		pq.insert(2, "B");
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		pq.insert(3, "C");
		pq.insert(2, "B");
		pq.insert(4, "D");
		pq.insert(5, "E");
		pq.insert(1, "A");
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		pq.insert(4, "D");
		pq.insert(3, "C");
		pq.insert(5, "E");
		pq.insert(1, "A");
		pq.insert(2, "B");
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
	}
	
	public static void testUPQ() {
		UnsortedPriorityQueue<Integer, String> pq = new UnsortedPriorityQueue<>();
		pq.insert(4, "D");
		pq.insert(3, "C");
		pq.insert(5, "E");
		pq.insert(1, "A");
		pq.insert(2, "B");
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		pq.insert(3, "C");
		pq.insert(2, "B");
		pq.insert(4, "D");
		pq.insert(5, "E");
		pq.insert(1, "A");
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		System.out.println("Peek: " + pq.peek());
		System.out.println("Removed: " + pq.remove());
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		pq.insert(4, "D");
		pq.insert(3, "C");
		pq.insert(5, "E");
		pq.insert(1, "A");
		pq.insert(2, "B");
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
		pq.sort();
		System.out.println("After Sort: ");
		System.out.println("Size: " + pq.size());
		System.out.println(pq.toString());
	}
	
	public static void testNH() {
		NodeHeap<Integer, String> nh = new NodeHeap<>();
		nh.insert(4, "D");
		nh.insert(3, "C");
		nh.insert(5, "E");
		nh.insert(1, "A");
		nh.insert(2, "B");
		nh.insert(6, "F");
		nh.insert(7, "G");
		System.out.println("Size: " + nh.size());
		nh.levelorder();
		System.out.println("Peek: " + nh.peek());
		System.out.println("Removed: " + nh.remove());
		System.out.println("Size: " + nh.size());
		nh.levelorder();
		System.out.println("Peek: " + nh.peek());
		System.out.println("Removed: " + nh.remove());
		System.out.println("Size: " + nh.size());
		nh.levelorder();
		System.out.println("Peek: " + nh.peek());
		System.out.println("Removed: " + nh.remove());
		System.out.println("Size: " + nh.size());
		nh.levelorder();
		System.out.println("Peek: " + nh.peek());
		System.out.println("Removed: " + nh.remove());
		System.out.println("Size: " + nh.size());
		nh.levelorder();
		System.out.println("Peek: " + nh.peek());
		System.out.println("Removed: " + nh.remove());
		System.out.println("Size: " + nh.size());
		nh.levelorder();
		System.out.println("Peek: " + nh.peek());
		System.out.println("Removed: " + nh.remove());
		System.out.println("Size: " + nh.size());
		nh.levelorder();
		System.out.println("Peek: " + nh.peek());
		System.out.println("Removed: " + nh.remove());
		System.out.println("Size: " + nh.size());
		nh.levelorder();
		System.out.println("Peek: " + nh.peek());
		System.out.println("Removed: " + nh.remove());
		System.out.println("Size: " + nh.size());
		nh.levelorder();
		System.out.println("Peek: " + nh.peek());
		System.out.println("Removed: " + nh.remove());
		System.out.println("Size: " + nh.size());
		nh.levelorder();
		nh.insert(2, "B");
		nh.insert(6, "F");
		nh.insert(3, "C");
		nh.insert(1, "A");
		nh.insert(4, "D");
		nh.insert(7, "G");
		nh.insert(5, "E");
		System.out.println("Size: " + nh.size());
		nh.levelorder();
		System.out.println("Peek: " + nh.peek());
		System.out.println("Removed: " + nh.remove());
		System.out.println("Size: " + nh.size());
		nh.levelorder();
		System.out.println("Peek: " + nh.peek());
		System.out.println("Removed: " + nh.remove());
		System.out.println("Size: " + nh.size());
		nh.levelorder();
		System.out.println("Peek: " + nh.peek());
		System.out.println("Removed: " + nh.remove());
		System.out.println("Size: " + nh.size());
		nh.levelorder();
		System.out.println("Peek: " + nh.peek());
		System.out.println("Removed: " + nh.remove());
		System.out.println("Size: " + nh.size());
		nh.levelorder();
		System.out.println("Peek: " + nh.peek());
		System.out.println("Removed: " + nh.remove());
		System.out.println("Size: " + nh.size());
		nh.levelorder();
		System.out.println("Peek: " + nh.peek());
		System.out.println("Removed: " + nh.remove());
		System.out.println("Size: " + nh.size());
		nh.levelorder();
		System.out.println("Peek: " + nh.peek());
		System.out.println("Removed: " + nh.remove());
		System.out.println("Size: " + nh.size());
		nh.levelorder();
		System.out.println("Peek: " + nh.peek());
		System.out.println("Removed: " + nh.remove());
		System.out.println("Size: " + nh.size());
		nh.levelorder();
		System.out.println("Peek: " + nh.peek());
		System.out.println("Removed: " + nh.remove());
		System.out.println("Size: " + nh.size());
		nh.levelorder();
		nh.insert(1, "A");
		nh.insert(2, "B");
		nh.insert(3, "C");
		nh.insert(4, "D");
		nh.insert(5, "E");
		nh.insert(6, "F");
		nh.insert(7, "G");
		System.out.println("Size: " + nh.size());
		nh.levelorder();
		nh.preorder();
		nh.postorder();
		nh.inorder();
	}
	
	public static void testAH() {
		ArrayHeap<Integer, String> ah = new ArrayHeap<>();
		ah.insert(4, "D");
		ah.insert(3, "C");
		ah.insert(5, "E");
		ah.insert(1, "A");
		ah.insert(2, "B");
		ah.insert(6, "F");
		ah.insert(7, "G");
		System.out.println("Size: " + ah.size());
		ah.levelorder();
		System.out.println("Peek: " + ah.peek());
		System.out.println("Removed: " + ah.remove());
		System.out.println("Size: " + ah.size());
		ah.levelorder();
		System.out.println("Peek: " + ah.peek());
		System.out.println("Removed: " + ah.remove());
		System.out.println("Size: " + ah.size());
		ah.levelorder();
		System.out.println("Peek: " + ah.peek());
		System.out.println("Removed: " + ah.remove());
		System.out.println("Size: " + ah.size());
		ah.levelorder();
		System.out.println("Peek: " + ah.peek());
		System.out.println("Removed: " + ah.remove());
		System.out.println("Size: " + ah.size());
		ah.levelorder();
		System.out.println("Peek: " + ah.peek());
		System.out.println("Removed: " + ah.remove());
		System.out.println("Size: " + ah.size());
		ah.levelorder();
		System.out.println("Peek: " + ah.peek());
		System.out.println("Removed: " + ah.remove());
		System.out.println("Size: " + ah.size());
		ah.levelorder();
		System.out.println("Peek: " + ah.peek());
		System.out.println("Removed: " + ah.remove());
		System.out.println("Size: " + ah.size());
		ah.levelorder();
		System.out.println("Peek: " + ah.peek());
		System.out.println("Removed: " + ah.remove());
		System.out.println("Size: " + ah.size());
		ah.levelorder();
		System.out.println("Peek: " + ah.peek());
		System.out.println("Removed: " + ah.remove());
		System.out.println("Size: " + ah.size());
		ah.levelorder();
		ah.insert(2, "B");
		ah.insert(6, "F");
		ah.insert(3, "C");
		ah.insert(1, "A");
		ah.insert(4, "D");
		ah.insert(7, "G");
		ah.insert(5, "E");
		System.out.println("Size: " + ah.size());
		ah.levelorder();
		System.out.println("Peek: " + ah.peek());
		System.out.println("Removed: " + ah.remove());
		System.out.println("Size: " + ah.size());
		ah.levelorder();
		System.out.println("Peek: " + ah.peek());
		System.out.println("Removed: " + ah.remove());
		System.out.println("Size: " + ah.size());
		ah.levelorder();
		System.out.println("Peek: " + ah.peek());
		System.out.println("Removed: " + ah.remove());
		System.out.println("Size: " + ah.size());
		ah.levelorder();
		System.out.println("Peek: " + ah.peek());
		System.out.println("Removed: " + ah.remove());
		System.out.println("Size: " + ah.size());
		ah.levelorder();
		System.out.println("Peek: " + ah.peek());
		System.out.println("Removed: " + ah.remove());
		System.out.println("Size: " + ah.size());
		ah.levelorder();
		System.out.println("Peek: " + ah.peek());
		System.out.println("Removed: " + ah.remove());
		System.out.println("Size: " + ah.size());
		ah.levelorder();
		System.out.println("Peek: " + ah.peek());
		System.out.println("Removed: " + ah.remove());
		System.out.println("Size: " + ah.size());
		ah.levelorder();
		System.out.println("Peek: " + ah.peek());
		System.out.println("Removed: " + ah.remove());
		System.out.println("Size: " + ah.size());
		ah.levelorder();
		System.out.println("Peek: " + ah.peek());
		System.out.println("Removed: " + ah.remove());
		System.out.println("Size: " + ah.size());
		ah.levelorder();
		ah.insert(1, "A");
		ah.insert(2, "B");
		ah.insert(3, "C");
		ah.insert(4, "D");
		ah.insert(5, "E");
		ah.insert(6, "F");
		ah.insert(7, "G");
		System.out.println("Size: " + ah.size());
		ah.levelorder();
		ah.preorder();
		ah.postorder();
		ah.inorder();
	}
	
	public static void testNBST() {
		NodeBST<Integer> nbst = new NodeBST<>();
		nbst.insert(4);
		nbst.insert(2);
		nbst.insert(1);
		nbst.insert(3);
		nbst.insert(6);
		nbst.insert(5);
		nbst.insert(7);
		System.out.println("Size: " + nbst.size());
		System.out.println("Height: " + nbst.getHeight(nbst.getRoot()));
		nbst.levelorder();
		nbst.inorder();
		System.out.println("Removed: " + nbst.remove(4));
		System.out.println("Size: " + nbst.size());
		System.out.println("Height: " + nbst.getHeight(nbst.getRoot()));
		nbst.levelorder();
		nbst.inorder();
		System.out.println("Removed: " + nbst.remove(5));
		System.out.println("Size: " + nbst.size());
		System.out.println("Height: " + nbst.getHeight(nbst.getRoot()));
		nbst.levelorder();
		nbst.inorder();
		System.out.println("Removed: " + nbst.remove(6));
		System.out.println("Size: " + nbst.size());
		System.out.println("Height: " + nbst.getHeight(nbst.getRoot()));
		nbst.levelorder();
		nbst.inorder();
		System.out.println("Removed: " + nbst.remove(7));
		System.out.println("Size: " + nbst.size());
		System.out.println("Height: " + nbst.getHeight(nbst.getRoot()));
		nbst.levelorder();
		nbst.inorder();
		System.out.println("Removed: " + nbst.remove(3));
		System.out.println("Size: " + nbst.size());
		System.out.println("Height: " + nbst.getHeight(nbst.getRoot()));
		nbst.levelorder();
		nbst.inorder();
		System.out.println("Removed: " + nbst.remove(2));
		System.out.println("Size: " + nbst.size());
		System.out.println("Height: " + nbst.getHeight(nbst.getRoot()));
		nbst.levelorder();
		nbst.inorder();
		System.out.println("Removed: " + nbst.remove(1));
		System.out.println("Size: " + nbst.size());
		nbst.levelorder();
		nbst.inorder();
		nbst.insert(4);
		nbst.insert(2);
		nbst.insert(1);
		nbst.insert(3);
		nbst.insert(6);
		nbst.insert(5);
		nbst.insert(7);
		System.out.println("Size: " + nbst.size());
		System.out.println("Height: " + nbst.getHeight(nbst.getRoot()));
		nbst.levelorder();
		nbst.inorder();
		System.out.println("Removed: " + nbst.remove(1));
		System.out.println("Size: " + nbst.size());
		System.out.println("Height: " + nbst.getHeight(nbst.getRoot()));
		nbst.levelorder();
		nbst.inorder();
		System.out.println("Removed: " + nbst.remove(3));
		System.out.println("Size: " + nbst.size());
		System.out.println("Height: " + nbst.getHeight(nbst.getRoot()));
		nbst.levelorder();
		nbst.inorder();
		System.out.println("Removed: " + nbst.remove(5));
		System.out.println("Size: " + nbst.size());
		System.out.println("Height: " + nbst.getHeight(nbst.getRoot()));
		nbst.levelorder();
		nbst.inorder();
		System.out.println("Removed: " + nbst.remove(7));
		System.out.println("Size: " + nbst.size());
		System.out.println("Height: " + nbst.getHeight(nbst.getRoot()));
		nbst.levelorder();
		nbst.inorder();
		System.out.println("Removed: " + nbst.remove(2));
		System.out.println("Size: " + nbst.size());
		System.out.println("Height: " + nbst.getHeight(nbst.getRoot()));
		nbst.levelorder();
		nbst.inorder();
		System.out.println("Removed: " + nbst.remove(6));
		System.out.println("Size: " + nbst.size());
		System.out.println("Height: " + nbst.getHeight(nbst.getRoot()));
		nbst.levelorder();
		nbst.inorder();
		System.out.println("Removed: " + nbst.remove(4));
		System.out.println("Size: " + nbst.size());
		System.out.println("Height: " + nbst.getHeight(nbst.getRoot()));
		nbst.levelorder();
		nbst.inorder();
		nbst.insert(4);
		nbst.insert(2);
		nbst.insert(1);
		nbst.insert(3);
		nbst.insert(6);
		nbst.insert(5);
		nbst.insert(7);
		System.out.println("Size: " + nbst.size());
		nbst.levelorder();
		nbst.preorder();
		nbst.postorder();
		nbst.inorder();
	}
	
	public static void testABST() {
		ArrayBST<Integer> abst = new ArrayBST<>();
		abst.insert(4);
		abst.insert(2);
		abst.insert(1);
		abst.insert(3);
		abst.insert(6);
		abst.insert(5);
		abst.insert(7);
		System.out.println("Size: " + abst.size());
		System.out.println("Height: " + abst.getHeight(0));
		abst.levelorder();
		abst.inorder();
		System.out.println("Removed: " + abst.remove(4));
		System.out.println("Size: " + abst.size());
		System.out.println("Height: " + abst.getHeight(0));
		abst.levelorder();
		abst.inorder();
		System.out.println("Removed: " + abst.remove(5));
		System.out.println("Size: " + abst.size());
		System.out.println("Height: " + abst.getHeight(0));
		abst.levelorder();
		abst.inorder();
		System.out.println("Removed: " + abst.remove(6));
		System.out.println("Size: " + abst.size());
		System.out.println("Height: " + abst.getHeight(0));
		abst.levelorder();
		abst.inorder();
		System.out.println("Removed: " + abst.remove(7));
		System.out.println("Size: " + abst.size());
		System.out.println("Height: " + abst.getHeight(0));
		abst.levelorder();
		abst.inorder();
		System.out.println("Removed: " + abst.remove(3));
		System.out.println("Size: " + abst.size());
		System.out.println("Height: " + abst.getHeight(0));
		abst.levelorder();
		abst.inorder();
		System.out.println("Removed: " + abst.remove(2));
		System.out.println("Size: " + abst.size());
		System.out.println("Height: " + abst.getHeight(0));
		abst.levelorder();
		abst.inorder();
		System.out.println("Removed: " + abst.remove(1));
		System.out.println("Size: " + abst.size());
		abst.levelorder();
		abst.inorder();
		abst.inorder();
		abst.insert(4);
		abst.insert(2);
		abst.insert(1);
		abst.insert(3);
		abst.insert(6);
		abst.insert(5);
		abst.insert(7);
		System.out.println("Size: " + abst.size());
		System.out.println("Height: " + abst.getHeight(0));
		abst.levelorder();
		abst.inorder();
		System.out.println("Removed: " + abst.remove(1));
		System.out.println("Size: " + abst.size());
		System.out.println("Height: " + abst.getHeight(0));
		abst.levelorder();
		abst.inorder();
		System.out.println("Removed: " + abst.remove(3));
		System.out.println("Size: " + abst.size());
		System.out.println("Height: " + abst.getHeight(0));
		abst.levelorder();
		abst.inorder();
		System.out.println("Removed: " + abst.remove(5));
		System.out.println("Size: " + abst.size());
		System.out.println("Height: " + abst.getHeight(0));
		abst.levelorder();
		abst.inorder();
		System.out.println("Removed: " + abst.remove(7));
		System.out.println("Size: " + abst.size());
		System.out.println("Height: " + abst.getHeight(0));
		abst.levelorder();
		abst.inorder();
		System.out.println("Removed: " + abst.remove(2));
		System.out.println("Size: " + abst.size());
		System.out.println("Height: " + abst.getHeight(0));
		abst.levelorder();
		abst.inorder();
		System.out.println("Removed: " + abst.remove(6));
		System.out.println("Size: " + abst.size());
		System.out.println("Height: " + abst.getHeight(0));
		abst.levelorder();
		abst.inorder();
		System.out.println("Removed: " + abst.remove(4));
		System.out.println("Size: " + abst.size());
		System.out.println("Height: " + abst.getHeight(0));
		abst.levelorder();
		abst.inorder();
		abst.insert(4);
		abst.insert(2);
		abst.insert(1);
		abst.insert(3);
		abst.insert(6);
		abst.insert(5);
		abst.insert(7);
		System.out.println("Size: " + abst.size());
		abst.levelorder();
		abst.preorder();
		abst.postorder();
		abst.inorder();
	}
	
	public static void testNAVL() {
        NodeBST<Integer> bst = new NodeBST<>();
        bst.insert(5);
        bst.insert(1);
        bst.insert(7);
        bst.insert(2);
        bst.insert(3);
        bst.insert(4);
        bst.insert(6);
        bst.insert(8);
        bst.insert(9);
        System.out.println("BST Height: " + bst.getHeight(bst.getRoot()));
        bst.levelorder();
        bst.preorder();
        bst.postorder();
        bst.inorder();
        NodeAVL<Integer> tree = new NodeAVL<>();
        tree.insert(5);
        tree.insert(1);
        tree.insert(7);
        tree.insert(2);
        tree.insert(3);
        tree.insert(4);
        tree.insert(6);
        tree.insert(8);
        tree.insert(9);
        System.out.println("AVL Height: " + tree.getHeight(tree.getRoot()));
        tree.levelorder();
        tree.preorder();
        tree.postorder();
        tree.inorder();
        tree.remove(9);
        tree.remove(8);
        System.out.println("AVL Height: " + tree.getHeight(tree.getRoot()));
        tree.levelorder();
        tree.preorder();
        tree.postorder();
        tree.inorder();
        tree.remove(4);
        System.out.println("AVL Height: " + tree.getHeight(tree.getRoot()));
        tree.levelorder();
        tree.preorder();
        tree.postorder();
        tree.inorder();
        tree.remove(5);
        tree.remove(7);
        tree.remove(6);
        System.out.println("AVL Height: " + tree.getHeight(tree.getRoot()));
        tree.levelorder();
        tree.preorder();
        tree.postorder();
        tree.inorder();
        tree.remove(2);
        tree.remove(3);
        tree.remove(1);
        tree.remove(2);
        tree.remove(2);
        tree.remove(2);
        System.out.println("AVL Height: " + tree.getHeight(tree.getRoot()));
        tree.levelorder();
        tree.preorder();
        tree.postorder();
        tree.inorder();
	}
}